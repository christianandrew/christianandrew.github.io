{"ast":null,"code":"/**\n * Builds a record object by attaching necessary field(s)\n * @param data Data to store\n */\nexport const buildRecordObject = data => {\n  return {\n    data,\n    lastChecked: Date.now()\n  };\n};\n/**\n * Returns true if the record has expired\n * otherwise returns false\n * @param record Local storage record\n * @param timeout Timeout in minutes\n */\n\nexport const isRecordExpired = (record, timeout) => {\n  return Date.now() > record.lastChecked + timeout * 60 * 1000;\n};\n/**\n * Returns true if the record is \"usable\"\n * otherwise returns false\n * @param record Local storage record\n * @param timeout Timeout in minutes\n */\n\nexport const isRecordUsable = (record, timeout) => {\n  return record.data !== undefined && !isRecordExpired(record, timeout);\n};","map":{"version":3,"sources":["/Users/godspeed/Desktop/caglarturali.github.io/src/utils/localStorage.ts"],"names":["buildRecordObject","data","lastChecked","Date","now","isRecordExpired","record","timeout","isRecordUsable","undefined"],"mappings":"AAEA;AACA;AACA;AACA;AACA,OAAO,MAAMA,iBAAiB,GAAOC,IAAJ,IAAgB;AAC/C,SAAO;AACLA,IAAAA,IADK;AAELC,IAAAA,WAAW,EAAEC,IAAI,CAACC,GAAL;AAFR,GAAP;AAID,CALM;AAOP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,eAAe,GAAG,CAC7BC,MAD6B,EAE7BC,OAF6B,KAG1B;AACH,SAAOJ,IAAI,CAACC,GAAL,KAAaE,MAAM,CAACJ,WAAP,GAAqBK,OAAO,GAAG,EAAV,GAAe,IAAxD;AACD,CALM;AAOP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,cAAc,GAAG,CAC5BF,MAD4B,EAE5BC,OAF4B,KAGzB;AACH,SAAOD,MAAM,CAACL,IAAP,KAAgBQ,SAAhB,IAA6B,CAACJ,eAAe,CAACC,MAAD,EAASC,OAAT,CAApD;AACD,CALM","sourcesContent":["import { LocalCache } from '../models';\n\n/**\n * Builds a record object by attaching necessary field(s)\n * @param data Data to store\n */\nexport const buildRecordObject = <T>(data: T) => {\n  return {\n    data,\n    lastChecked: Date.now(),\n  } as LocalCache.Record<T>;\n};\n\n/**\n * Returns true if the record has expired\n * otherwise returns false\n * @param record Local storage record\n * @param timeout Timeout in minutes\n */\nexport const isRecordExpired = <T>(\n  record: LocalCache.Record<T>,\n  timeout: number,\n) => {\n  return Date.now() > record.lastChecked + timeout * 60 * 1000;\n};\n\n/**\n * Returns true if the record is \"usable\"\n * otherwise returns false\n * @param record Local storage record\n * @param timeout Timeout in minutes\n */\nexport const isRecordUsable = <T>(\n  record: LocalCache.Record<T>,\n  timeout: number,\n) => {\n  return record.data !== undefined && !isRecordExpired(record, timeout);\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/**\n * Builds a record object by attaching necessary field(s)\n * @param data Data to store\n */export var buildRecordObject=function buildRecordObject(data){return{data:data,lastChecked:Date.now()};};/**\n * Returns true if the record has expired\n * otherwise returns false\n * @param record Local storage record\n * @param timeout Timeout in minutes\n */export var isRecordExpired=function isRecordExpired(record,timeout){return Date.now()>record.lastChecked+timeout*60*1000;};/**\n * Returns true if the record is \"usable\"\n * otherwise returns false\n * @param record Local storage record\n * @param timeout Timeout in minutes\n */export var isRecordUsable=function isRecordUsable(record,timeout){return record.data!==undefined&&!isRecordExpired(record,timeout);};","map":{"version":3,"sources":["/Users/godspeed/Desktop/caglarturali.github.io/src/utils/localStorage.ts"],"names":["buildRecordObject","data","lastChecked","Date","now","isRecordExpired","record","timeout","isRecordUsable","undefined"],"mappings":"AAEA;AACA;AACA;AACA,GACA,MAAO,IAAMA,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAAIC,IAAJ,CAAgB,CAC/C,MAAO,CACLA,IAAI,CAAJA,IADK,CAELC,WAAW,CAAEC,IAAI,CAACC,GAAL,EAFR,CAAP,CAID,CALM,CAOP;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,IAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAC7BC,MAD6B,CAE7BC,OAF6B,CAG1B,CACH,MAAOJ,CAAAA,IAAI,CAACC,GAAL,GAAaE,MAAM,CAACJ,WAAP,CAAqBK,OAAO,CAAG,EAAV,CAAe,IAAxD,CACD,CALM,CAOP;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,IAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAC5BF,MAD4B,CAE5BC,OAF4B,CAGzB,CACH,MAAOD,CAAAA,MAAM,CAACL,IAAP,GAAgBQ,SAAhB,EAA6B,CAACJ,eAAe,CAACC,MAAD,CAASC,OAAT,CAApD,CACD,CALM","sourcesContent":["import { LocalCache } from '../models';\n\n/**\n * Builds a record object by attaching necessary field(s)\n * @param data Data to store\n */\nexport const buildRecordObject = <T>(data: T) => {\n  return {\n    data,\n    lastChecked: Date.now(),\n  } as LocalCache.Record<T>;\n};\n\n/**\n * Returns true if the record has expired\n * otherwise returns false\n * @param record Local storage record\n * @param timeout Timeout in minutes\n */\nexport const isRecordExpired = <T>(\n  record: LocalCache.Record<T>,\n  timeout: number,\n) => {\n  return Date.now() > record.lastChecked + timeout * 60 * 1000;\n};\n\n/**\n * Returns true if the record is \"usable\"\n * otherwise returns false\n * @param record Local storage record\n * @param timeout Timeout in minutes\n */\nexport const isRecordUsable = <T>(\n  record: LocalCache.Record<T>,\n  timeout: number,\n) => {\n  return record.data !== undefined && !isRecordExpired(record, timeout);\n};\n"]},"metadata":{},"sourceType":"module"}